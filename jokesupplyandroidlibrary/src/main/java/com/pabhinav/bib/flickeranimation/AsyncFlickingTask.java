package com.pabhinav.bib.flickeranimation;

import android.os.AsyncTask;
import android.widget.ImageView;

/**
 * This class extends {@link AsyncTask},
 * used to flicker images provided to it, after given flicker interval.
 *
 * @author pabhinav.
 */
public class AsyncFlickingTask extends AsyncTask {

    /**
     * Images will be flickered on this ImageView object.
     */
    private ImageView truckImage;

    /**
     * List of all images to be displayed on ImageView object.
     */
    private int[]  intResIds;

    /**
     * Time after which images will be displayed on ImageView object.
     */
    private int flickTimeInMillis;

    /**
     * This pattern is important, it decides which image resource is picked up when,
     * For eg, say we have three image resources, then the pattern generated by this
     * class is : Image 1, Image 2, Image 3, Image 2, Image 1.
     * So, images will be flickered in this order.
     *
     * This is default pattern, to change this,
     * extend {@link FlickerDeprecated} class and override {@code prepareFlickerPattern} method.
     */
    private int[] flickerPattern;

    /**
     * This is an interface, used as callback class.
     */
    private TaskCompleted taskCompleted;

    /**
     * Field used to store current index in flicker pattern using which image resource to be rendered is decided.
     */
    private int currentIndexInPattern;

    /**
     * Default constructor used to set private fields of this class.
     * Also, triggers execute method of {@link AsyncTask}.
     *
     * @param truckImage
     * @param intResIds
     * @param flickTimeInMillis
     * @param flickerPattern
     */
    public AsyncFlickingTask(ImageView truckImage, int[] intResIds, int flickTimeInMillis, int[] flickerPattern){
        this.truckImage = truckImage;
        this.intResIds = intResIds;
        this.flickTimeInMillis = flickTimeInMillis;
        this.flickerPattern = flickerPattern;

        /** Since, first image is already set, so current index is first index in flickerPattern **/
        currentIndexInPattern = 0;

        /** Execute this task **/
        execute();
    }

    @Override
    protected Object doInBackground(Object[] params) {
        try {
            for(int i = 1; i<flickerPattern.length; i++) {
                /** Need to wait till flick time is over **/
                Thread.sleep((long) flickTimeInMillis);

                /** Need to go to main thread to render next image resource, after waiting. **/
                publishProgress(null);
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    protected void onProgressUpdate(Object... values) {

        /** Set the next image waiting to be rendered, according to flicker pattern **/
        setNextImage();
    }

    @Override
    protected void onPostExecute(Object result) {

        /** Make a call to callback method, to inform task completion **/
        taskCompleted.onTaskComplete();
    }

    /**
     * Setter method for {@link AsyncFlickingTask.TaskCompleted}
     * callback interface.
     *
     * @param taskCompleted
     */
    public void setTaskCompleted(TaskCompleted taskCompleted){
        this.taskCompleted = taskCompleted;
    }


    /**
     * Callback Interface,
     * used to inform task completion to the calling class.
     */
    interface TaskCompleted{
        void onTaskComplete();
    }

    /**
     * Decides which is the next image, according to flicker pattern, to be
     * rendered to {@link ImageView}.
     */
    private void setNextImage(){

        /** Increment index in flicker pattern **/
        currentIndexInPattern = currentIndexInPattern + 1;

        /** Get the image according to current index in flicker pattern **/
        int imageResource = intResIds[flickerPattern[currentIndexInPattern]-1];

        /** Set the image **/
        truckImage.setBackgroundResource(imageResource);
    }
}
